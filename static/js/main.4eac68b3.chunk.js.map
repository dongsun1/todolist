{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","USERTODOLIST_KEY","userGetTodo","localStorage","getItem","parseTodo","JSON","parse","toDoState","atom","key","default","categoryState","TO_DO","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","toDosSave","useRecoilValue","setToDos","useSetRecoilState","useForm","register","handleSubmit","setValue","setItem","stringify","onSubmit","oldToDos","id","Date","now","text","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","DOING","DONE","DELETE","ToDoList","useRecoilState","setCategory","console","log","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.4eac68b3.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\r\n\r\nexport enum Categories {\r\n  'TO_DO' = 'TO_DO',\r\n  'DOING' = 'DOING',\r\n  'DONE' = 'DONE',\r\n  'DELETE' = 'DELETE',\r\n}\r\n\r\nexport interface IToDo {\r\n  id: number;\r\n  text: string;\r\n  category: Categories;\r\n}\r\n\r\nexport const USERTODOLIST_KEY = 'todos';\r\n\r\nconst userGetTodo = localStorage.getItem(USERTODOLIST_KEY);\r\nconst parseTodo = JSON.parse(userGetTodo as string);\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: 'toDo',\r\n  default: userGetTodo !== null ? parseTodo : [],\r\n});\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: 'category',\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: 'toDoSelector',\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n","import { useForm } from 'react-hook-form';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport { categoryState, toDoState, USERTODOLIST_KEY } from '../atoms';\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const toDosSave = useRecoilValue(toDoState);\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => [\r\n      { id: Date.now(), text: toDo, category: category },\r\n      ...oldToDos,\r\n    ]);\r\n    setValue('toDo', '');\r\n  };\r\n  localStorage.setItem(USERTODOLIST_KEY, JSON.stringify(toDosSave));\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register('toDo', {\r\n          required: 'Please write a To Do',\r\n        })}\r\n        placeholder='Write a to do'\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from 'react';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { Categories, IToDo, toDoState } from '../atoms';\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as any };\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  const onDelete = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {category !== Categories.TO_DO && (\r\n        <button name={Categories.TO_DO} onClick={onClick}>\r\n          ToDo\r\n        </button>\r\n      )}\r\n      {category !== Categories.DOING && (\r\n        <button name={Categories.DOING} onClick={onClick}>\r\n          Doing\r\n        </button>\r\n      )}\r\n      {category !== Categories.DONE && (\r\n        <button name={Categories.DONE} onClick={onClick}>\r\n          Done\r\n        </button>\r\n      )}\r\n      <button name={Categories.DELETE} onClick={onDelete}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { Categories, categoryState, toDoSelector, toDoState } from '../atoms';\r\nimport CreateToDo from './CreateToDo';\r\nimport ToDo from './ToDo';\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  console.log(toDos);\r\n\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <select value={category} onInput={onInput}>\r\n        <option value={Categories.TO_DO}>To Do</option>\r\n        <option value={Categories.DOING}>Doing</option>\r\n        <option value={Categories.DONE}>Done</option>\r\n      </select>\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { createGlobalStyle } from 'styled-components';\nimport ToDoList from './components/ToDoList';\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n  html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n*{\n  box-sizing: border-box;\n}\nbody{\n\tfont-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: ${(props) => props.theme.textColor};\n\tline-height: 1.2;\n}\na{\n  text-decoration: none;\n\tcolor:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { darkTheme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","import { DefaultTheme } from 'styled-components';\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: '#2f3640',\r\n  textColor: 'white',\r\n  accentColor: '#9c88ff',\r\n  cardBgColor: 'transparent',\r\n};\r\n"],"sourceRoot":""}